			04.09.2020

1. Да се напише функция с прототип int my_strlen(char *str), която връща като резултат дължината на str.		
   Под дължина се има предвид броят на символите преди терминиращата нула. При възникнала грешка, функцията 
   трябва да връща невалидна стойност.
2. Да се напише функция с прототип char* my_strcpy(char *source, char *destination), която копира source в destination
   и връща указател към destination. Може да се приеме, че ако source и destination са валидни указатели,
   то за destination е заделена достатъчно памет, за да побере в себе си съдържанието на низa source + терминиращата нула.
3. Да се напише функция с прототип int my_strcmp(char *str1, char* str2), която сравнява лексикографски низовете str1 
   и str2 и връща като резултат: -1 ако str1 < str2 ; 0 ако str1 == str2 ; 1 ако str1 > str2 ; друга стойност в случай 
   на грешка.
4. Да се напише функция с прототип void revertString(char *str), която обръща низa str отзад-напред. 
   Пример: "abcdefgh" -> "hgfedcba"
5. Да се напише функция с прототип int largestDistanceBetweenMatchingCharacters(char *str), която връща като
   резултат най-голямото разстояние между две срещания на един и същ символ в низа str.
6. Да се напише функция с прототип void trimCharacterFromString(char *str, char c), която премахва всички срещания на
   символа c от низа str.
7. Да се напише функция с прототип void deleteShorterFromLongerString(char* str1, char* str2), която премахва всички
   срещания на по-краткия низ от по-дългия низ. Предполага се, че в момента на извикването на функцията не се знае 
   кой е по-краткият низ и кой - по-дългият.
8. Да се напише функция с прототип int replaceString(char *str, char *old, char *new), която заменя всяко срещане на
   низа old в низа str с низа new и връща като резултат броя на промените. Може да приемете, че ако всички указатели 
   са валидни, то низът str ще бъде достатъчно голям, за да побере промените. При празен низ old е редно функцията да 
   не променя низа str.
9. Да се напише функция с прототип char* intToString(int n), която връща динамично заделен низ, съдържащ числото n заедно
   с предхождащия го знак и терминиращата нула.
10. Да се напише функция с прототип char* appendIntegerToString(char *str, int n), която записва числото n в края на низа
   str. Можете да приемете, че ако str е валиден указател, то низът към който сочи ще бъде достатъчно голям, за да побере 
   числото и терминиращата нула.